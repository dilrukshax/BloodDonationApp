@page "/events/{EventId:int}"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@inject EventService EventService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Event Details</PageTitle>

<!-- Hero Section -->
<section class="event-hero text-white text-center py-5 bg-primary">
    <div class="container">
        <h1 class="display-5">Event Details</h1>
        <p class="lead">Learn more about our upcoming blood donation events.</p>
    </div>
</section>

<!-- Event Details Section -->
<section class="event-details-section py-5">
    <div class="container">
        @if (isLoading)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading event details...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else if (eventDetail != null)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">@eventDetail.Title</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@eventDetail.Description</p>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item">
                            <i class="bi bi-calendar-event text-primary me-2"></i>
                            <strong>Date:</strong> @eventDetail.EventDate.ToString("f")
                        </li>
                        <li class="list-group-item">
                            <i class="bi bi-geo-alt text-primary me-2"></i>
                            <strong>Location:</strong> @eventDetail.Location
                        </li>
                        <!-- Removed "Created At" and "Last Updated" fields -->
                    </ul>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-secondary" @onclick="GoBack">
                            <i class="bi bi-arrow-left me-2"></i> Back to Events
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center">
                <p class="lead">Event not found.</p>
                <button class="btn btn-secondary mt-3" @onclick="GoBack">
                    <i class="bi bi-arrow-left me-2"></i> Back to Events
                </button>
            </div>
        }
    </div>
</section>

@code {
    [Parameter]
    public int EventId { get; set; }

    private EventDto eventDetail;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetails();
    }

    private async Task LoadEventDetails()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            eventDetail = await EventService.GetEventByIdAsync(EventId);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading event details. Please try again later.";
            // Optionally log the exception here
            // Logger.LogError(ex, "Error loading event details.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/events");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap tooltips if any
            await JSRuntime.InvokeVoidAsync("eval", @"
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=""tooltip""]'))
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl)
                })
            ");
        }
    }
}
