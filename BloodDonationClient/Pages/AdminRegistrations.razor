@page "/admin/registrations"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "admin")]
@inject RegistrationService RegistrationService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components

<PageTitle>All Registrations</PageTitle>

<div class="container my-5">
    <h3 class="text-primary mb-4">All Event Registrations</h3>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading registrations...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (registrations != null && registrations.Count > 0)
    {
        <div class="row mb-4">
            <div class="col-12">
                <h5 class="text-secondary">Event Summary</h5>
                <div class="row">
                    @foreach (var eventSummary in eventSummaries)
                    {
                        <div class="col-md-4">
                            <div class="card event-card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">@eventSummary.EventTitle</h5>
                                    <p class="card-text">Registrations: @eventSummary.RegistrationCount</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Email</th>
                    <th>Event Title</th>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Registered At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reg in registrations)
                {
                    <tr>
                        <td>@reg.Username</td>
                        <td>@reg.UserEmail</td>
                        <td>@reg.EventTitle</td>
                        <td>@reg.EventDate.ToString("f")</td>
                        <td>@reg.EventLocation</td>
                        <td>@reg.RegisteredAt.ToString("g")</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(reg.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No registrations found.</p>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteConfirmation)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this registration?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="DeleteRegistration">Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<RegistrationDto> registrations = new List<RegistrationDto>();
    private List<EventSummaryDto> eventSummaries = new List<EventSummaryDto>();
    private bool isLoading = true;
    private string errorMessage;

    private int registrationIdToDelete;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRegistrations();
        GenerateEventSummaries();
    }

    private async Task LoadRegistrations()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            registrations = await RegistrationService.GetAllRegistrationsAsync();
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while loading registrations.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GenerateEventSummaries()
    {
        eventSummaries = registrations
            .GroupBy(r => r.EventTitle)
            .Select(g => new EventSummaryDto
                {
                    EventTitle = g.Key,
                    RegistrationCount = g.Count()
                })
            .ToList();
    }

    private void ConfirmDelete(int id)
    {
        registrationIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private async Task DeleteRegistration()
    {
        showDeleteConfirmation = false;
        try
        {
            var success = await RegistrationService.AdminDeleteRegistrationAsync(registrationIdToDelete);
            if (success)
            {
                await LoadRegistrations();
                GenerateEventSummaries();
                // Optionally, show a success message
            }
            else
            {
                errorMessage = "Failed to delete the registration.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while deleting the registration.";
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        registrationIdToDelete = 0;
    }

    public class EventSummaryDto
    {
        public string EventTitle { get; set; }
        public int RegistrationCount { get; set; }
    }
}
