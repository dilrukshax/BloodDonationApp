@page "/login"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3 position-relative">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" @bind-Value="loginModel.Email" type="email" class="form-control ps-4" placeholder="Enter your email" />
                            <i class="bi bi-envelope-fill form-icon"></i>
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-4 position-relative">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control ps-4" placeholder="Enter your password" />
                            <i class="bi bi-lock-fill form-icon"></i>
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </EditForm>

                    <div class="text-center mt-3">
                        <a href="/register" class="text-decoration-none">Don't have an account? <strong>Register</strong></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string errorMessage;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                await LocalStorage.SetItemAsync("authToken", result.Token);
                ((ApiAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Login failed: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }

    public class LoginResult
    {
        public string Token { get; set; }
    }
}
