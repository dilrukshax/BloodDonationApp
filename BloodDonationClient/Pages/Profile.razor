@page "/profile"
@using BloodDonationClient.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims

<PageTitle>Profile</PageTitle>

<h3>User Profile</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (profile != null)
{
    <div class="card mb-4">
        <div class="card-header">
            <h4>@profile.Username's Profile</h4>
        </div>
        <div class="card-body">
            <p><strong>Email:</strong> @profile.Email</p>
            <p><strong>Blood Type:</strong> @profile.BloodType</p>
            <p><strong>Date of Birth:</strong> @profile.DateOfBirth.ToShortDateString()</p>
            <p><strong>Gender:</strong> @profile.Gender</p>
            <p><strong>Phone Number:</strong> @profile.PhoneNumber</p>
            <p><strong>Address:</strong> @profile.Address</p>
        </div>
    </div>

    <button class="btn btn-primary mb-3" @onclick="ToggleEditForm">Edit Profile</button>
    <button class="btn btn-danger mb-3" @onclick="ToggleDeleteForm">Delete Profile</button>

    @if (isEditing)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Edit Profile</h5>
            </div>
            <div class="card-body">
                <EditForm Model="updateModel" OnValidSubmit="HandleUpdate">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Username:</label>
                        <InputText @bind-Value="updateModel.Username" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Blood Type:</label>
                        <InputSelect @bind-Value="updateModel.BloodType" class="form-control">
                            <option value="">-- Select Blood Type --</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label>Date of Birth:</label>
                        <InputDate @bind-Value="updateModel.DateOfBirth" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Gender:</label>
                        <InputSelect @bind-Value="updateModel.Gender" class="form-control">
                            <option value="">-- Select Gender --</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label>Phone Number:</label>
                        <InputText @bind-Value="updateModel.PhoneNumber" type="tel" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Address:</label>
                        <InputText @bind-Value="updateModel.Address" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>New Email:</label>
                        <InputText @bind-Value="updateModel.NewEmail" type="email" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>New Password:</label>
                        <InputText @bind-Value="updateModel.NewPassword" type="password" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-success">Save Changes</button>
                    <button type="button" class="btn btn-secondary ml-2" @onclick="ToggleEditForm">Cancel</button>
                </EditForm>
            </div>
        </div>
    }

    @if (isDeleting)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Delete Profile</h5>
            </div>
            <div class="card-body">
                <p>Are you sure you want to delete your profile? This action cannot be undone.</p>
                <EditForm Model="deleteModel" OnValidSubmit="HandleDelete">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Confirm Password:</label>
                        <InputText @bind-Value="deleteModel.Password" type="password" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-danger">Delete Profile</button>
                    <button type="button" class="btn btn-secondary ml-2" @onclick="ToggleDeleteForm">Cancel</button>
                </EditForm>
            </div>
        </div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (updateErrorMessage != null)
    {
        <div class="alert alert-danger">@updateErrorMessage</div>
    }
    @if (deleteErrorMessage != null)
    {
        <div class="alert alert-danger">@deleteErrorMessage</div>
    }

    @code {
    private ProfileModel profile;
    private UpdateProfileModel updateModel = new UpdateProfileModel();
    private DeleteProfileModel deleteModel = new DeleteProfileModel();
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isDeleting = false;
    private string errorMessage;
    private string successMessage;
    private string updateErrorMessage;
    private string deleteErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.GetAsync("api/profile");
            if (response.IsSuccessStatusCode)
            {
                profile = await response.Content.ReadFromJsonAsync<ProfileModel>();
                // Initialize updateModel with current profile data
                updateModel = new UpdateProfileModel
                    {
                        Username = profile.Username,
                        BloodType = profile.BloodType,
                        DateOfBirth = profile.DateOfBirth,
                        Gender = profile.Gender,
                        PhoneNumber = profile.PhoneNumber,
                        Address = profile.Address,
                        NewEmail = profile.Email // Optional: prefill with current email
                        // NewPassword is left null by default
                    };
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                // Redirect to login if unauthorized
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading the profile.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEditForm()
    {
        isEditing = !isEditing;
        isDeleting = false;
        successMessage = null;
        updateErrorMessage = null;
    }

    private void ToggleDeleteForm()
    {
        isDeleting = !isDeleting;
        isEditing = false;
        successMessage = null;
        deleteErrorMessage = null;
    }

    private async Task HandleUpdate()
    {
        updateErrorMessage = null;
        successMessage = null;

        try
        {
            // Create a copy of the updateModel to manipulate
            var payload = new UpdateProfileModel
                {
                    Username = updateModel.Username,
                    BloodType = updateModel.BloodType,
                    DateOfBirth = updateModel.DateOfBirth,
                    Gender = updateModel.Gender,
                    PhoneNumber = updateModel.PhoneNumber,
                    Address = updateModel.Address,
                    NewEmail = updateModel.NewEmail
                };

            // Only include NewPassword if it's not empty or null
            if (!string.IsNullOrWhiteSpace(updateModel.NewPassword))
            {
                payload.NewPassword = updateModel.NewPassword;
            }

            var response = await Http.PutAsJsonAsync("api/profile", payload);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Profile updated successfully.";
                await LoadProfile();
                isEditing = false;

                // If email was changed, update the token if necessary
                var newEmail = updateModel.NewEmail;
                if (!string.IsNullOrWhiteSpace(newEmail))
                {
                    // Optionally, re-authenticate or update the token
                    // For simplicity, we'll reload the profile
                    ((ApiAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(await _localStorage.GetItemAsync<string>("authToken"));
                }
            }
            else
            {
                updateErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            updateErrorMessage = "An error occurred while updating the profile.";
            // Optionally log the exception
        }
    }

    private async Task HandleDelete()
    {
        deleteErrorMessage = null;
        successMessage = null;

        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete your profile? This action cannot be undone.");
        if (!confirm)
        {
            return;
        }

        try
        {
            var response = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Delete, "api/profile")
                {
                    Content = JsonContent.Create(deleteModel)
                });

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Profile deleted successfully.";
                await LocalStorage.RemoveItemAsync("authToken");
                ((ApiAuthenticationStateProvider)AuthStateProvider).NotifyUserLogout();
                Navigation.NavigateTo("/");
            }
            else
            {
                deleteErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            deleteErrorMessage = "An error occurred while deleting the profile.";
            // Optionally log the exception
        }
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    }
}
