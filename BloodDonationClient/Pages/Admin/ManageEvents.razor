@page "/admin/events"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@inject EventService EventService
@inject NavigationManager Navigation

<PageTitle>Admin - Manage Events</PageTitle>

<div class="container my-5">
    <h3 class="text-primary">Manage Blood Donation Events</h3>

    <!-- Add New Event Button -->
    <button class="btn btn-primary mb-3" @onclick="NavigateToAddEvent">Add New Event</button>

    <!-- Toggle Buttons for Past and Present Events -->
    <div class="mb-3">
        <button class="btn btn-outline-primary me-2" @onclick="ShowPresentEvents" disabled="@(showPastEvents ? null : "disabled")">Show Present Events</button>
        <button class="btn btn-outline-secondary" @onclick="ShowPastEvents" disabled="@(showPastEvents ? "disabled" : null)">Show Past Events</button>
    </div>

    @if (isLoading)
    {
        <p><em>Loading events...</em></p>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (filteredEvents != null && filteredEvents.Count > 0)
    {
        <!-- Event Table -->
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evt in filteredEvents)
                {
                    <tr>
                        <td>@evt.Title</td>
                        <td>@evt.EventDate.ToString("f")</td>
                        <td>@evt.Location</td>
                        <td>
                            <button class="btn btn-info btn-sm mr-2" @onclick="() => ViewEvent(evt.Id)">View</button>
                            <button class="btn btn-primary btn-sm mr-2" @onclick="() => EditEvent(evt.Id)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteEvent(evt.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No events found.</p>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteConfirmation)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this event?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="DeleteEvent">Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<EventDto> events = new List<EventDto>();
    private List<EventDto> filteredEvents = new List<EventDto>();
    private bool isLoading = true;
    private string errorMessage;
    private int eventIdToDelete;
    private bool showDeleteConfirmation = false;

    private bool showPastEvents = false; // Toggle state

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            events = await EventService.GetAllEventsAsync();
            FilterEvents();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading events.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterEvents()
    {
        var currentDate = DateTime.Now;

        if (showPastEvents)
        {
            filteredEvents = events.Where(evt => evt.EventDate < currentDate).OrderByDescending(evt => evt.EventDate).ToList();
        }
        else
        {
            filteredEvents = events.Where(evt => evt.EventDate >= currentDate).OrderBy(evt => evt.EventDate).ToList();
        }
    }

    private void ShowPastEvents()
    {
        showPastEvents = true;
        FilterEvents();
    }

    private void ShowPresentEvents()
    {
        showPastEvents = false;
        FilterEvents();
    }

    private void NavigateToAddEvent()
    {
        Navigation.NavigateTo("/admin/events/add");
    }

    private void ViewEvent(int id)
    {
        Navigation.NavigateTo($"/events/{id}");
    }

    private void EditEvent(int id)
    {
        Navigation.NavigateTo($"/admin/events/edit/{id}");
    }

    private void ConfirmDeleteEvent(int id)
    {
        eventIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private async Task DeleteEvent()
    {
        showDeleteConfirmation = false;
        try
        {
            var success = await EventService.DeleteEventAsync(eventIdToDelete);
            if (success)
            {
                await LoadEvents();
                // Optionally, show a success message
            }
            else
            {
                errorMessage = "Failed to delete the event.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the event.";
            // Optionally log the exception
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        eventIdToDelete = 0;
    }
}
