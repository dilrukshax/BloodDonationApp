@page "/admin/users/{UserId:int}"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AdminService AdminService
@inject NavigationManager Navigation

<PageTitle>Admin - User Details</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container my-5">
            <h3 class="text-primary">User Details</h3>

            @if (isLoading)
            {
                <p><em>Loading user details...</em></p>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            else if (user != null)
            {
                <div class="card shadow-lg border-light">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">User Information</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>ID:</strong> @user.Id</p>
                        <p><strong>Username:</strong> @user.Username</p>
                        <p><strong>Email:</strong> @user.Email</p>
                        <p><strong>Blood Type:</strong> @user.BloodType</p>
                        <p><strong>Date of Birth:</strong> @user.DateOfBirth.ToShortDateString()</p>
                        <p><strong>Gender:</strong> @user.Gender</p>
                        <p><strong>Phone Number:</strong> @user.PhoneNumber</p>
                        <p><strong>Address:</strong> @user.Address</p>
                        <p><strong>Role:</strong> @user.Role</p>
                    </div>
                </div>

                <div class="mt-3">
                    <button class="btn btn-secondary" @onclick="GoBack">Back to Users List</button>
                    <button class="btn btn-primary ml-2" @onclick="EditUser">Edit User</button>
                    <button class="btn btn-danger ml-2" @onclick="() => ConfirmDeleteUser(user.Id)">Delete User</button>
                </div>

                <!-- Delete Confirmation Modal -->
                @if (showDeleteConfirmation)
                {
                    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="display: block;">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Confirm Deletion</h5>
                                    <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <p>Are you sure you want to delete this user? This action cannot be undone.</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-backdrop fade show"></div>
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container my-5">
            <h3 class="text-danger">Access Denied</h3>
            <p>You do not have permission to view this page.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int UserId { get; set; }

    private AdminUserDto user;
    private bool isLoading = true;
    private string errorMessage;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDetails();
    }

    private async Task LoadUserDetails()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            user = await AdminService.GetUserByIdAsync(UserId);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading user details.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/users");
    }

    private void EditUser()
    {
        Navigation.NavigateTo($"/admin/users/edit/{user.Id}");
    }

    private void ConfirmDeleteUser(int id)
    {
        user = user ?? new AdminUserDto();
        showDeleteConfirmation = true;
    }

    private async Task DeleteUser()
    {
        showDeleteConfirmation = false;
        try
        {
            var success = await AdminService.DeleteUserAsync(UserId);
            if (success)
            {
                Navigation.NavigateTo("/admin/users");
            }
            else
            {
                errorMessage = "Failed to delete the user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the user.";
            // Optionally log the exception
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }
}
