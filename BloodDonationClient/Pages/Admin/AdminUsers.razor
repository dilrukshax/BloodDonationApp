@page "/admin/users"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AdminService AdminService
@inject NavigationManager Navigation

<PageTitle>Admin - Users</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container my-5">
            <h3 class="text-primary">All Registered Users</h3>

            @if (isLoading)
            {
                <p><em>Loading users...</em></p>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-bordered shadow-lg">
                        <thead class="bg-light">
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Blood Type</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.Username</td>
                                    <td>@user.Email</td>
                                    <td>@user.BloodType</td>
                                    <td>@user.Role</td>
                                    <td>
                                        <button class="btn btn-info btn-sm mr-2" @onclick="() => ViewUser(user.Id)">View</button>
                                        <button class="btn btn-warning btn-sm mr-2" @onclick="() => EditUser(user.Id)">Edit</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteUser(user.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (showDeleteConfirmation)
            {
                <div class="modal fade show d-block" tabindex="-1" role="dialog" style="display: block;">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Deletion</h5>
                                <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete this user? This action cannot be undone.</p>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container my-5">
            <h3 class="text-danger">Access Denied</h3>
            <p>You do not have permission to view this page.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<AdminUserDto> users = new List<AdminUserDto>();
    private bool isLoading = true;
    private string errorMessage;
    private int userIdToDelete;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            users = await AdminService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading users.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ViewUser(int id)
    {
        Navigation.NavigateTo($"/admin/users/{id}");
    }

    private void EditUser(int id)
    {
        Navigation.NavigateTo($"/admin/users/edit/{id}");
    }

    private void ConfirmDeleteUser(int id)
    {
        userIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private async Task DeleteUser()
    {
        showDeleteConfirmation = false;
        try
        {
            var success = await AdminService.DeleteUserAsync(userIdToDelete);
            if (success)
            {
                await LoadUsers();
                // Optionally, show a success message
            }
            else
            {
                errorMessage = "Failed to delete the user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the user.";
            // Optionally log the exception
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        userIdToDelete = 0;
    }
}
