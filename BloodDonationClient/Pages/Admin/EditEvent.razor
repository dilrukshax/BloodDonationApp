@page "/admin/events/edit/{EventId:int}"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using Microsoft.AspNetCore.Components.Forms
@inject EventService EventService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Admin - Edit Event</PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4 text-primary">Edit Blood Donation Event</h3>

                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading event details...</span>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    else if (eventDetail != null)
                    {
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                @successMessage
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(updateErrorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @updateErrorMessage
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        <EditForm Model="eventUpdateDto" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            <!-- Event Title -->
                            <div class="mb-3 position-relative">
                                <label for="title" class="form-label">Event Title:</label>
                                <InputText id="title" @bind-Value="eventUpdateDto.Title" class="form-control ps-4" placeholder="Enter event title" />
                                <i class="bi bi-card-text form-icon"></i>
                                <ValidationMessage For="@(() => eventUpdateDto.Title)" />
                            </div>

                            <!-- Event Description -->
                            <div class="mb-3 position-relative">
                                <label for="description" class="form-label">Event Description:</label>
                                <InputTextArea id="description" @bind-Value="eventUpdateDto.Description" class="form-control ps-4" placeholder="Enter event description" rows="4" />
                                <i class="bi bi-file-earmark-text form-icon"></i>
                                <ValidationMessage For="@(() => eventUpdateDto.Description)" />
                            </div>

                            <!-- Event Date -->
                            <div class="mb-3 position-relative">
                                <label for="eventDate" class="form-label">Event Date:</label>
                                <InputDate id="eventDate" @bind-Value="eventUpdateDto.EventDate" class="form-control ps-4" />
                                <i class="bi bi-calendar-event-fill form-icon"></i>
                                <ValidationMessage For="@(() => eventUpdateDto.EventDate)" />
                            </div>

                            <!-- Event Location -->
                            <div class="mb-4 position-relative">
                                <label for="location" class="form-label">Event Location:</label>
                                <InputText id="location" @bind-Value="eventUpdateDto.Location" class="form-control ps-4" placeholder="Enter event location" />
                                <i class="bi bi-geo-alt-fill form-icon"></i>
                                <ValidationMessage For="@(() => eventUpdateDto.Location)" />
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <p class="text-center">Event not found.</p>
                    }
                </div>
            </div>
            <div class="text-center mt-3">
                <p><a href="/admin/events" class="text-decoration-none"><strong>Back to Events Management</strong></a></p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int EventId { get; set; }

    private EventDto eventDetail;
    private EventUpdateDto eventUpdateDto = new EventUpdateDto();
    private bool isLoading = true;
    private string errorMessage;
    private string successMessage;
    private string updateErrorMessage;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetails();
    }

    private async Task LoadEventDetails()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            eventDetail = await EventService.GetEventByIdAsync(EventId);
            if (eventDetail != null)
            {
                // Initialize the update DTO with existing event details
                eventUpdateDto = new EventUpdateDto
                    {
                        Title = eventDetail.Title,
                        Description = eventDetail.Description,
                        EventDate = eventDetail.EventDate,
                        Location = eventDetail.Location
                    };
            }
            else
            {
                errorMessage = "Event not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading event details.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        updateErrorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var success = await EventService.UpdateEventAsync(EventId, eventUpdateDto);
            if (success)
            {
                successMessage = "Event updated successfully.";
                // Optionally, redirect back to events list after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/admin/events");
            }
            else
            {
                updateErrorMessage = "Failed to update the event. Please try again.";
            }
        }
        catch (Exception ex)
        {
            updateErrorMessage = "An error occurred while updating the event.";
            // Optionally log the exception
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/events");
    }
}
