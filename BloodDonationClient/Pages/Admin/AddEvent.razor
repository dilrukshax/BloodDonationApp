@page "/admin/events/add"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using Microsoft.AspNetCore.Components.Forms
@inject EventService EventService
@inject NavigationManager Navigation

<PageTitle>Admin - Add Event</PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4 text-primary">Create New Blood Donation Event</h3>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <EditForm Model="eventCreateDto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <!-- Event Title -->
                        <div class="mb-3 position-relative">
                            <label for="title" class="form-label">Event Title:</label>
                            <InputText id="title" @bind-Value="eventCreateDto.Title" class="form-control ps-4" placeholder="Enter event title" />
                            <i class="bi bi-card-text form-icon"></i>
                            <ValidationMessage For="@(() => eventCreateDto.Title)" />
                        </div>

                        <!-- Event Description -->
                        <div class="mb-3 position-relative">
                            <label for="description" class="form-label">Event Description:</label>
                            <InputTextArea id="description" @bind-Value="eventCreateDto.Description" class="form-control ps-4" placeholder="Enter event description" rows="3" />
                            <i class="bi bi-file-earmark-text form-icon"></i>
                            <ValidationMessage For="@(() => eventCreateDto.Description)" />
                        </div>

                        <!-- Event Date -->
                        <div class="mb-3 position-relative">
                            <label for="eventDate" class="form-label">Event Date:</label>
                            <InputDate id="eventDate" @bind-Value="eventCreateDto.EventDate" class="form-control ps-4" />
                            <i class="bi bi-calendar-event-fill form-icon"></i>
                            <ValidationMessage For="@(() => eventCreateDto.EventDate)" />
                        </div>

                        <!-- Event Location -->
                        <div class="mb-4 position-relative">
                            <label for="location" class="form-label">Event Location:</label>
                            <InputText id="location" @bind-Value="eventCreateDto.Location" class="form-control ps-4" placeholder="Enter event location" />
                            <i class="bi bi-geo-alt-fill form-icon"></i>
                            <ValidationMessage For="@(() => eventCreateDto.Location)" />
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    
                                }
                                else
                                {
                                    <span>Create Event</span>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="text-center mt-3">
                <p><a href="/admin/events" class="text-decoration-none"><strong>Back to Events Management</strong></a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private EventCreateDto eventCreateDto = new EventCreateDto();
    private string successMessage;
    private string errorMessage;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var success = await EventService.CreateEventAsync(eventCreateDto);
            if (success)
            {
                successMessage = "Event created successfully!";
                // Optionally, redirect after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/admin/events");
            }
            else
            {
                errorMessage = "Failed to create the event. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the event.";
            // Optionally, log the exception for debugging
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/events");
    }
}
