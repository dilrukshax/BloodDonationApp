@page "/admin/eventreports/{EventId:int}"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@using BloodDonationClient.Components
@inject EventReportService EventReportService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@attribute [Authorize(Roles = "admin")]

<PageTitle>Event Report Details</PageTitle>

<div class="container my-5">
    <h3 class="text-primary mb-4">Event Report Details</h3>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading event report...</span>
            </div>
            <p class="mt-3">Loading event report...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (eventReport != null)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">@eventReport.EventTitle</h5>
            </div>
            <div class="card-body">
                <p><strong>Participated People Count:</strong> @eventReport.ParticipatedPeopleCount</p>
                <p><strong>Cost:</strong> @eventReport.Cost.ToString("C")</p>

                <h5 class="mt-4">Blood Collection Statistics:</h5>
                <ul class="list-group list-group-flush mb-3">
                    <li class="list-group-item">A+: @eventReport.APositive</li>
                    <li class="list-group-item">B+: @eventReport.BPositive</li>
                    <li class="list-group-item">AB+: @eventReport.ABPositive</li>
                    <li class="list-group-item">O+: @eventReport.OPositive</li>
                    <li class="list-group-item">A-: @eventReport.ANegative</li>
                    <li class="list-group-item">B-: @eventReport.BNegative</li>
                    <li class="list-group-item">AB-: @eventReport.ABNegative</li>
                    <li class="list-group-item">O-: @eventReport.ONegative</li>
                </ul>

                <!-- Bar Graph for Blood Variants -->
                <div class="mt-4">
                    <BloodVariantsChart CanvasId="bloodVariantsChart"
                                        Labels="@bloodVariantLabels"
                                        Data="@bloodVariantData" />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-warning" @onclick="EditReport">Edit Report</button>
                    <button class="btn btn-secondary" @onclick="GoBack">Back to Reports</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int EventId { get; set; }

    private EventReportDto eventReport;
    private bool isLoading = true;
    private string errorMessage;

    private List<string> bloodVariantLabels = new List<string>
    {
        "A+",
        "B+",
        "AB+",
        "O+",
        "A-",
        "B-",
        "AB-",
        "O-"
    };

    private List<int> bloodVariantData = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEventReport();
    }

    private async Task LoadEventReport()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            eventReport = await EventReportService.GetEventReportByEventIdAsync(EventId);
            if (eventReport != null)
            {
                // Populate blood variant data
                bloodVariantData = new List<int>
                {
                    eventReport.APositive,
                    eventReport.BPositive,
                    eventReport.ABPositive,
                    eventReport.OPositive,
                    eventReport.ANegative,
                    eventReport.BNegative,
                    eventReport.ABNegative,
                    eventReport.ONegative
                };
            }
            else
            {
                errorMessage = "Event report not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading the event report.";
            Console.Error.WriteLine(ex);
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditReport()
    {
        Navigation.NavigateTo($"/admin/eventreports/{EventId}/edit");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/eventreports");
    }
}
