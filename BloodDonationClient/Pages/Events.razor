@page "/events"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@inject EventService EventService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Blood Donation Events</PageTitle>

<!-- Hero Section -->
<section class="hero-section text-white text-center py-5">
    <div class="container">
        <h1 class="display-4">Join Our Life-Saving Blood Donation Events</h1>
        <p class="lead">Make a difference in your community by donating blood.</p>
        <a href="#events-section" class="btn btn-primary btn-lg mt-3">View Events</a>
    </div>
</section>

<!-- Search and Filter Section -->
<section class="search-filter-section py-4 bg-light" id="events-section">
    <div class="container">
        <div class="row g-3">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Search by title..." @bind="searchTerm" @bind:event="oninput" />
            </div>
            <div class="col-md-3">
                <input type="date" class="form-control" @bind="filterDate" />
            </div>
            <div class="col-md-3">
                <input type="text" class="form-control" placeholder="Filter by location..." @bind="filterLocation" @bind:event="oninput" />
            </div>
            <div class="col-md-2">
                <button class="btn btn-secondary w-100" @onclick="ApplyFilters">Apply Filters</button>
            </div>
        </div>
    </div>
</section>

<!-- Events Section -->
<section class="events-section py-5">
    <div class="container">
        <h3 class="text-center mb-4">Upcoming Blood Donation Events</h3>

        @if (isLoading)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading events...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
        else if (filteredEvents != null && filteredEvents.Count > 0)
        {
            <div class="row g-4">
                @foreach (var evt in filteredEvents)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="card h-100 shadow-sm event-card">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@evt.Title</h5>
                                <p class="card-text">
                                    @(evt.Description.Length > 150 ? evt.Description.Substring(0, 150) + "..." : evt.Description)
                                </p>
                                <div class="mt-auto">
                                    <p class="card-text">
                                        <small class="text-muted">
                                            <i class="bi bi-calendar-event"></i> <strong>Date:</strong> @evt.EventDate.ToString("f")<br />
                                            <i class="bi bi-geo-alt"></i> <strong>Location:</strong> @evt.Location
                                        </small>
                                    </p>
                                    <a href="@($"/events/{evt.Id}")" class="btn btn-primary w-100" data-bs-toggle="tooltip" title="Click to view more details">View Details</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center">
                <p class="lead">No upcoming events found.</p>
                <p>Check back later or contact us to create a new event.</p>
            </div>
        }
    </div>
</section>

@code {
    private List<EventDto> events = new List<EventDto>();
    private List<EventDto> filteredEvents = new List<EventDto>();
    private bool isLoading = true;
    private string errorMessage;

    // Filter variables
    private string searchTerm = string.Empty;
    private DateTime? filterDate = null;
    private string filterLocation = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            events = await EventService.GetAllEventsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading events. Please try again later.";
            // Optionally log the exception here
            // Logger.LogError(ex, "Error fetching events.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var currentDate = DateTime.Now;

        filteredEvents = events.Where(evt =>
            evt.EventDate >= currentDate && // Exclude past events
            (string.IsNullOrWhiteSpace(searchTerm) || evt.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (!filterDate.HasValue || evt.EventDate.Date == filterDate.Value.Date) &&
            (string.IsNullOrWhiteSpace(filterLocation) || evt.Location.Contains(filterLocation, StringComparison.OrdinalIgnoreCase))
        ).OrderBy(evt => evt.EventDate).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap tooltips
            await JSRuntime.InvokeVoidAsync("eval", @"
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=""tooltip""]'))
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl)
                })
            ");
        }
    }
}
