@page "/events"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@inject EventService EventService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Blood Donation Events</PageTitle>

<h3 class="text-center my-4">Blood Donation Events</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}
else if (events != null && events.Count > 0)
{
    <div class="row">
        @foreach (var evt in events)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm h-100">
                    <!-- Image removed -->
                    <div class="card-body">
                        <h5 class="card-title">@evt.Title</h5>
                        <p class="card-text">
                            @(evt.Description.Length > 100 ? evt.Description.Substring(0, 100) + "..." : evt.Description)
                        </p>
                        <small class="text-muted">
                            <strong>Date:</strong> @evt.EventDate.ToString("f")
                            | <strong>Location:</strong> @evt.Location
                        </small>
                    </div>
                    <div class="card-footer text-center">
                        <a href="@($"/events/{evt.Id}")" class="btn btn-primary w-100">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No upcoming events found.</p>
}

@code {
    private List<EventDto> events = new List<EventDto>();
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            events = await EventService.GetAllEventsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading events. Please try again later.";
            // Optionally log the exception here
            // Logger.LogError(ex, "Error fetching events.");
        }
        finally
        {
            isLoading = false;
        }
    }
}
