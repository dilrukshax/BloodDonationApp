@page "/admin/eventreports"
@using BloodDonationClient.Models
@using BloodDonationClient.Services
@inject EventReportService EventReportService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "admin")]

<PageTitle>Manage Event Reports</PageTitle>

<div class="container my-5">
    <h3 class="text-primary mb-4">Manage Event Reports</h3>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading event reports...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (eventReports != null && eventReports.Count > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Event Title</th>
                    <th>Participated People</th>
                    <th>Cost</th>
                    <th>Total Blood Collected</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in eventReports)
                {
                    <tr>
                        <td>@report.EventTitle</td>
                        <td>@report.ParticipatedPeopleCount</td>
                        <td>@report.Cost.ToString("C")</td>
                        <td>
                            A+: @report.APositive <br />
                            B+: @report.BPositive <br />
                            AB+: @report.ABPositive <br />
                            O+: @report.OPositive <br />
                            A-: @report.ANegative <br />
                            B-: @report.BNegative <br />
                            AB-: @report.ABNegative <br />
                            O-: @report.ONegative
                        </td>
                        <td>
                            <button class="btn btn-info btn-sm me-2" @onclick="() => ViewReport(report.EventId)">View</button>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditReport(report.EventId)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(report.EventId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No event reports found.</p>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteConfirmation)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this event report?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="DeleteReport">Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <div class="mt-4">
        <button class="btn btn-primary" @onclick="CreateReport">Create New Event Report</button>
    </div>
</div>

@code {
    private List<EventReportDto> eventReports = new List<EventReportDto>();
    private bool isLoading = true;
    private string errorMessage;

    private int eventIdToDelete;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventReports();
    }

    private async Task LoadEventReports()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            eventReports = await EventReportService.GetAllEventReportsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading event reports.";
            // Optionally log the exception
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ViewReport(int eventId)
    {
        Navigation.NavigateTo($"/admin/eventreports/{eventId}");
    }

    private void EditReport(int eventId)
    {
        Navigation.NavigateTo($"/admin/eventreports/{eventId}/edit");
    }

    private void CreateReport()
    {
        Navigation.NavigateTo("/admin/eventreports/create");
    }

    private void ConfirmDelete(int eventId)
    {
        eventIdToDelete = eventId;
        showDeleteConfirmation = true;
    }

    private async Task DeleteReport()
    {
        showDeleteConfirmation = false;

        try
        {
            var success = await EventReportService.DeleteEventReportAsync(eventIdToDelete);
            if (success)
            {
                await LoadEventReports();
                // Optionally, show a success message
            }
            else
            {
                errorMessage = "Failed to delete the event report.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the event report.";
            // Optionally log the exception
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        eventIdToDelete = 0;
    }
}
