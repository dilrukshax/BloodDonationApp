@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization

<CascadingAuthenticationState>
    <div class="main-layout">
        <!-- Header Section -->
        <header class="header">
            <div class="top-row px-4">
                <div class="nav-links">
                    <ul class="nav">
                        <li class="nav-item">
                            <NavLink class="nav-link" href="">Home</NavLink>
                        </li>

                        <!-- Admin-specific links -->
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="admin/users">Manage Users</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="admin/events">Manage Events</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="admin/eventreports">Event Reports</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="admin/registrations">All Registrations</NavLink>
                                </li>
                            </Authorized>
                        </AuthorizeView>

                        <!-- General authenticated user links -->
                        <AuthorizeView>
                            <Authorized>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="profile">Profile</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="events">Events</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="my-registrations">My Registrations</NavLink>
                                </li>
                            </Authorized>
                            <NotAuthorized>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="login">Login</NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link" href="register">Register</NavLink>
                                </li>
                            </NotAuthorized>
                        </AuthorizeView>
                    </ul>
                </div>

                <div class="auth-controls">
                    <AuthorizeView>
                        <Authorized>
                            <span class="mr-2" style="color: black;">Hello, @username!</span>
                            <button class="btn btn-link" style="color: black;" @onclick="Logout">Logout</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </header>

        <!-- Main Content Section -->
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private ILocalStorageService LocalStorage { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private string username = "User";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name ?? "User";
        }

        // Subscribe to AuthenticationStateChanged to update username dynamically
        AuthenticationStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var state = await task;
            var usr = state.User;
            if (usr.Identity.IsAuthenticated)
            {
                username = usr.Identity.Name ?? "User";
            }
            else
            {
                username = "User";
            }

            InvokeAsync(StateHasChanged);
        };
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        if (AuthenticationStateProvider is ApiAuthenticationStateProvider apiAuthStateProvider)
        {
            apiAuthStateProvider.NotifyUserLogout();
        }
        Navigation.NavigateTo("/");
    }
}
