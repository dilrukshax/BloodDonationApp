@inherits LayoutComponentBase

<PageTitle>BloodDonationClient</PageTitle>

<CascadingAuthenticationState>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <AuthorizeView>
                    <Authorized>
                        <span class="mr-2">Hello, @username!</span>
                        <button class="btn btn-link" @onclick="Logout">Logout</button>
                    </Authorized>
                    <NotAuthorized>
                        <NavLink class="nav-link" href="login">Login</NavLink>
                        <NavLink class="nav-link" href="register">Register</NavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private ILocalStorageService LocalStorage { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private string username = "User";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name ?? "User";
        }

        // Subscribe to AuthenticationStateChanged to update username dynamically
        AuthenticationStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var state = await task;
            var usr = state.User;
            if (usr.Identity.IsAuthenticated)
            {
                username = usr.Identity.Name ?? "User";
            }
            else
            {
                username = "User";
            }

            InvokeAsync(StateHasChanged);
        };
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        if (AuthenticationStateProvider is ApiAuthenticationStateProvider apiAuthStateProvider)
        {
            apiAuthStateProvider.NotifyUserLogout();
        }
        Navigation.NavigateTo("/");
    }
}
